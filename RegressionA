# Load libraries
import importlib_resources
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.linalg import svd 
from scipy.stats import zscore
from Data_preprocessing import *
from scipy.linalg import svd 
import seaborn as sns
import sklearn.linear_model as lm
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split

# Define target variable (ldl) and features (all others)
selected_features = ["obesity", "tobacco", "alcohol", "famhist"]
y = df["ldl"].values  # Dependent variable
X = df[selected_features].values  # Independent variables

# Standardize data: mean = 0, std = 1
X_stand = zscore(X, ddof=1)

# Fit linear regression model (like ex5_2_2)
model_linear = lm.LinearRegression()
model_linear.fit(X_stand, y)

# Predict target values (like ex5_2_5)
y_pred_linear = model_linear.predict(X_stand)

# Compute regression metrics
mse_linear = mean_squared_error(y, y_pred_linear)
r2_linear = r2_score(y, y_pred_linear)

# Display results for linear regression
print(f"\nLinear Regression Results:")
print(f"Mean Squared Error: {mse_linear:.4f}")
print(f"R² Score: {r2_linear:.4f}")

# Scatter plot: Actual vs. Predicted values with jitter
plt.figure(figsize=(8, 5))
plt.scatter(y + np.random.uniform(-0.05, 0.05, size=len(y)),  # Add jitter
            y_pred_linear, alpha=0.5)
plt.xlabel("Actual LDL (Jittered)")
plt.ylabel("Predicted LDL")
plt.title("Linear Regression: Actual vs Predicted CHD")
plt.axhline(y.mean(), color="r", linestyle="--", label="Mean CHD")
plt.legend()
plt.show()



## Nedenstående del er muligvis ikke nødvendig!?
# Split data into training and test sets (80% training, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X_stand, y, test_size=0.2, random_state=42)

# Fit linear regression model on training data
model_linear_train = lm.LinearRegression()
model_linear_train.fit(X_train, y_train)

# Predict values using the trained model
y_pred_test = model_linear_train.predict(X_test)

# Compute regression metrics on test data
mse_test = mean_squared_error(y_test, y_pred_test)
r2_test = r2_score(y_test, y_pred_test)

# Display test results
print(f"\nLinear Regression Test Results:")
print(f"Mean Squared Error (Test Set): {mse_test:.4f}")
print(f"R² Score (Test Set): {r2_test:.4f}")

# Scatter plot: Actual vs. Predicted LDL for test data
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred_test, alpha=0.5)
plt.xlabel("Actual LDL")
plt.ylabel("Predicted LDL")
plt.title("Linear Regression: Actual vs Predicted LDL (Test Set)")
plt.axhline(y_test.mean(), color="r", linestyle="--", label="Mean LDL")
plt.legend()
plt.show()